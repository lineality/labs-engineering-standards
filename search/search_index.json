{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Labs Engineering Standards Overview This document describes the engineering standards that teams working in Lambda X must comply with. Adherence to these standards are critical to the continued success of the Lambda X organization, as they allow us to more effectively manage the scores of teams working across hundreds of products. GitHub Repository Topics This guide is divided into separate topics, saved here in Notion as pages. A topic corresponds to a specific area of concern in software engineering: Developer Workflow Data Persistence Programming Languages Git Code Quality Security Process These standards will morph over time as we adapt to the ever-changing technology landscape. In addition, the stardards will embrace a subset of all of the available technologies, so that teams have options when making technical decisions. To in order to ensure that these documents are inclusive of the needs of all Labs groups, each new standard or change to an existing standard will be ratified by approval from 3 Labs Tech Leads. Writing Standards","title":"Home"},{"location":"#labs-engineering-standards","text":"","title":"Labs Engineering Standards"},{"location":"#overview","text":"This document describes the engineering standards that teams working in Lambda X must comply with. Adherence to these standards are critical to the continued success of the Lambda X organization, as they allow us to more effectively manage the scores of teams working across hundreds of products. GitHub Repository","title":"Overview"},{"location":"#topics","text":"This guide is divided into separate topics, saved here in Notion as pages. A topic corresponds to a specific area of concern in software engineering: Developer Workflow Data Persistence Programming Languages Git Code Quality Security","title":"Topics"},{"location":"#process","text":"These standards will morph over time as we adapt to the ever-changing technology landscape. In addition, the stardards will embrace a subset of all of the available technologies, so that teams have options when making technical decisions. To in order to ensure that these documents are inclusive of the needs of all Labs groups, each new standard or change to an existing standard will be ratified by approval from 3 Labs Tech Leads. Writing Standards","title":"Process"},{"location":"topics/code-quality/","text":"Code Quality (CQ-100) High Maintainability All repositories must maintain their master branch at a Code Climate maintainability score of C or above. This score must be updated at least once per day, ideally whenever code is merged into the master branch. The score must be displayed on the README at the root of the repository. Rationale: Code Climate provides a robust and industry standard measure for the maintainability of a code base. While this is only one of many possible measures, Code Climate provides a solid baseline for measuring code quality. Exceptions: Programming languages not supported by Code Climate. (CQ-200) Robust Test Coverage All repositories are required to maintain a test code coverage level of 30% and above for their master branch. Code coverage percentage must be updated at least once per day, ideally whenever code is merged into the master branch. The coverage percentage must be displayed on the README at the root of the repository. Rationale: Code coverage is an indicator of how well test cases cover the codebase. While not a singular indicator of test quality, it is an important factor in ensuring that test cases cover a wide area of the codebase. Exceptions: None","title":"Code Quality"},{"location":"topics/code-quality/#code-quality","text":"","title":"Code Quality"},{"location":"topics/code-quality/#cq-100-high-maintainability","text":"All repositories must maintain their master branch at a Code Climate maintainability score of C or above. This score must be updated at least once per day, ideally whenever code is merged into the master branch. The score must be displayed on the README at the root of the repository. Rationale: Code Climate provides a robust and industry standard measure for the maintainability of a code base. While this is only one of many possible measures, Code Climate provides a solid baseline for measuring code quality. Exceptions: Programming languages not supported by Code Climate.","title":"(CQ-100) High Maintainability"},{"location":"topics/code-quality/#cq-200-robust-test-coverage","text":"All repositories are required to maintain a test code coverage level of 30% and above for their master branch. Code coverage percentage must be updated at least once per day, ideally whenever code is merged into the master branch. The coverage percentage must be displayed on the README at the root of the repository. Rationale: Code coverage is an indicator of how well test cases cover the codebase. While not a singular indicator of test quality, it is an important factor in ensuring that test cases cover a wide area of the codebase. Exceptions: None","title":"(CQ-200) Robust Test Coverage"},{"location":"topics/data-persistence/","text":"Data Persistence (DP-100) Managed Services Only Only fully managed storage services are to be used for hosting a database in a shared environment. Rationale: Managing database servers is an incredibly complex and resource intensive endeavor. By utilizing management services, that operational overhead are greatly reduced. Exceptions: None (DP-200) Approved Database Engines Only the following database engines are approved for project in Labs: Engine Permitted Versions Providers Postgres > 11.5.0 AWS RDS Heroku Postgres SQLite None None Oracle None None MySQL None None DB2 None None Rationale: We restrict the database engine use in Lambda Labs so that we can focus our resources on a subset of available technologies. By narrowing the field of choices, we feel that product quality will be improved through the sharing of common knowledge and reusable components. Exceptions: None","title":"Data Persistence"},{"location":"topics/data-persistence/#data-persistence","text":"","title":"Data Persistence"},{"location":"topics/data-persistence/#dp-100-managed-services-only","text":"Only fully managed storage services are to be used for hosting a database in a shared environment. Rationale: Managing database servers is an incredibly complex and resource intensive endeavor. By utilizing management services, that operational overhead are greatly reduced. Exceptions: None","title":"(DP-100) Managed Services Only"},{"location":"topics/data-persistence/#dp-200-approved-database-engines","text":"Only the following database engines are approved for project in Labs: Engine Permitted Versions Providers Postgres > 11.5.0 AWS RDS Heroku Postgres SQLite None None Oracle None None MySQL None None DB2 None None Rationale: We restrict the database engine use in Lambda Labs so that we can focus our resources on a subset of available technologies. By narrowing the field of choices, we feel that product quality will be improved through the sharing of common knowledge and reusable components. Exceptions: None","title":"(DP-200) Approved Database Engines"},{"location":"topics/developer-workflow/","text":"Developer Workflow (DW-100) One path to deployment Workflow for all Lab products must follow the diagram below. Original Rationale: Standard workflow helps create a common language for a team to use and understand the state of a task and the project Exceptions: None","title":"Developer Workflow"},{"location":"topics/developer-workflow/#developer-workflow","text":"","title":"Developer Workflow"},{"location":"topics/developer-workflow/#dw-100-one-path-to-deployment","text":"Workflow for all Lab products must follow the diagram below. Original Rationale: Standard workflow helps create a common language for a team to use and understand the state of a task and the project Exceptions: None","title":"(DW-100) One path to deployment"},{"location":"topics/git/","text":"Github (GH-100) One GitHub Organization Code for all student GitHub projects must be stored in the Lambda School Labs Github organization: https://github.com/Lambda-School-Labs Rationale: Centralizing code into a single organization allows for easier management. Exceptions: None (GH-101) Organization Roles Lambda School staff and Section Leads will have the Owner role. All other organization members will have the Member role. Rationale: Least privilege Exceptions: None (GH-200) Dedicated GitHub Teams Each project team will have their own dedicated GitHub team within the Lambda School Labs organization. Rationale: Project specific teams allows for easier application of precise (least privilege) permissions as well as easier provisioning and deprovisioning as cohorts begin and end. Exceptions: None (GH-201) GitHub Team Naming GitHub project teams shall be created using the following convention: Name: <Cohort> - <Product> (Example: Labs 20 - Brew Plans ) Rationale: GitHub teams have no mechanism for storing metadata, so the product name and cohort must be encoded in the team name. Exceptions: None (GH-202) GitHub Team Roles GitHub project team membership and team roles will be as follows: Section Lead \u21d2 Maintainer Team Lead \u21d2 Maintainer Student \u21d2 Member Rationale: Least privilege access Exceptions: None (GH-300) GitHub Repo Naming GitHub repos shall be named in all lowercase using the following convention: Name: - - The Product name can be stripped of special characters, shortened or otherwise made to be more readable, though it should remain consistent across repositories. The Purpose must be one of the following fe for a front-end repository be for a back-end repository ds for a data science repository mobile for a cross-platform mobile repository ios for an iOS specific mobile repository android for an Android specific mobile repository site for a static website associated with the product The Postfix is an arbitrary string that can be appended when multiple repositories with the same purpose are require for a particular product. Rationale: GitHub repositories have no mechanism for storing metadata, so the product name and purpose must be encoded in the repo name. Exceptions: None (GH-310) GitHub Templates All GitHub repositories must be created using one of the following templates: https://github.com/Lambda-School-Labs/template-fe https://github.com/Lambda-School-Labs/template-be https://github.com/Lambda-School-Labs/template-ds https://github.com/Lambda-School-Labs/template-android https://github.com/Lambda-School-Labs/template-site Rationale: Consistency is critical for managing a highly complex organization at scale. Starting from the same basic template helps to maintain this consistency. Exceptions: None (GH-320) GitHub Repo Licensing The README in the root of each GitHub repository must advertise that the code is maintained under the MIT license. There must be a file named LICENSE in the root of the directory using the MIT license format as described here: https://opensource.org/licenses/MIT Use the year the project was created for the year Use 'Lambda School' as the copyright holder Rationale: Code written during Labs projects must be maintained as open-source so that it can be reference by hiring managers considering Lambda School students as candidates. The MIT license is very permissive and provides opportunities for student developed code to be reused and expanded by the open source community. Exceptions: None (GH-330) GitHub Repo Badges The README in the root of each GitHub repository must contain the following badges: Code Climate Maintainability https://codeclimate.com/github/codeclimate/codeclimate/badges Code Climate Test Coverage https://codeclimate.com/github/codeclimate/codeclimate/badges Rationale: Code Climate is the standard system for ensuring quality across all Labs products. Displaying a badge front and center in a repo is important to maintain visibility into the state of the codebase. Exceptions: Any repository with code that is not supported by Code Climate","title":"Git"},{"location":"topics/git/#github","text":"","title":"Github"},{"location":"topics/git/#gh-100-one-github-organization","text":"Code for all student GitHub projects must be stored in the Lambda School Labs Github organization: https://github.com/Lambda-School-Labs Rationale: Centralizing code into a single organization allows for easier management. Exceptions: None","title":"(GH-100) One GitHub Organization"},{"location":"topics/git/#gh-101-organization-roles","text":"Lambda School staff and Section Leads will have the Owner role. All other organization members will have the Member role. Rationale: Least privilege Exceptions: None","title":"(GH-101) Organization Roles"},{"location":"topics/git/#gh-200-dedicated-github-teams","text":"Each project team will have their own dedicated GitHub team within the Lambda School Labs organization. Rationale: Project specific teams allows for easier application of precise (least privilege) permissions as well as easier provisioning and deprovisioning as cohorts begin and end. Exceptions: None","title":"(GH-200) Dedicated GitHub Teams"},{"location":"topics/git/#gh-201-github-team-naming","text":"GitHub project teams shall be created using the following convention: Name: <Cohort> - <Product> (Example: Labs 20 - Brew Plans ) Rationale: GitHub teams have no mechanism for storing metadata, so the product name and cohort must be encoded in the team name. Exceptions: None","title":"(GH-201) GitHub Team Naming"},{"location":"topics/git/#gh-202-github-team-roles","text":"GitHub project team membership and team roles will be as follows: Section Lead \u21d2 Maintainer Team Lead \u21d2 Maintainer Student \u21d2 Member Rationale: Least privilege access Exceptions: None","title":"(GH-202) GitHub Team Roles"},{"location":"topics/git/#gh-300-github-repo-naming","text":"GitHub repos shall be named in all lowercase using the following convention: Name: - - The Product name can be stripped of special characters, shortened or otherwise made to be more readable, though it should remain consistent across repositories. The Purpose must be one of the following fe for a front-end repository be for a back-end repository ds for a data science repository mobile for a cross-platform mobile repository ios for an iOS specific mobile repository android for an Android specific mobile repository site for a static website associated with the product The Postfix is an arbitrary string that can be appended when multiple repositories with the same purpose are require for a particular product. Rationale: GitHub repositories have no mechanism for storing metadata, so the product name and purpose must be encoded in the repo name. Exceptions: None","title":"(GH-300) GitHub Repo Naming"},{"location":"topics/git/#gh-310-github-templates","text":"All GitHub repositories must be created using one of the following templates: https://github.com/Lambda-School-Labs/template-fe https://github.com/Lambda-School-Labs/template-be https://github.com/Lambda-School-Labs/template-ds https://github.com/Lambda-School-Labs/template-android https://github.com/Lambda-School-Labs/template-site Rationale: Consistency is critical for managing a highly complex organization at scale. Starting from the same basic template helps to maintain this consistency. Exceptions: None","title":"(GH-310) GitHub Templates"},{"location":"topics/git/#gh-320-github-repo-licensing","text":"The README in the root of each GitHub repository must advertise that the code is maintained under the MIT license. There must be a file named LICENSE in the root of the directory using the MIT license format as described here: https://opensource.org/licenses/MIT Use the year the project was created for the year Use 'Lambda School' as the copyright holder Rationale: Code written during Labs projects must be maintained as open-source so that it can be reference by hiring managers considering Lambda School students as candidates. The MIT license is very permissive and provides opportunities for student developed code to be reused and expanded by the open source community. Exceptions: None","title":"(GH-320) GitHub Repo Licensing"},{"location":"topics/git/#gh-330-github-repo-badges","text":"The README in the root of each GitHub repository must contain the following badges: Code Climate Maintainability https://codeclimate.com/github/codeclimate/codeclimate/badges Code Climate Test Coverage https://codeclimate.com/github/codeclimate/codeclimate/badges Rationale: Code Climate is the standard system for ensuring quality across all Labs products. Displaying a badge front and center in a repo is important to maintain visibility into the state of the codebase. Exceptions: Any repository with code that is not supported by Code Climate","title":"(GH-330) GitHub Repo Badges"},{"location":"topics/programming-languages/","text":"Programming Languages (PL-100) Language Usage Language Frontend Backend Mobile Java Prohibited See Below See Below Javascript See Below See Below See Below Python Prohibited See Below Prohibited C# Prohibited Prohibited Prohibited PHP Prohibited Prohibited Prohibited C/C++ Prohibited Prohibited Prohibited Objective-C Prohibited Prohibited Prohibited Rationale: We restrict the programming languages and frameworks in Lambda Labs so that we can focus our resources on a subset of available technologies. By narrowing the field of choices, we feel that product quality will be improved through the sharing of common knowledge and reusable components. Exceptions: None (PL-200) Framework Versions Framework Permitted Versions Notes React > 16.10 Java SDK Java SE 12 Java SE 13 Spring Framework > 5.2.0 Spring Boot > 2.0.0 Node.js > 12 Android SDK > 10 React Native > 0.60 Rationale: We restrict the frameworks and versions in Lambda Labs so that we can focus our resources on a subset of available technologies. By narrowing the field of choices, we feel that product quality will be improved through the sharing of common knowledge and reusable components. Exceptions: None","title":"Programming Languages"},{"location":"topics/programming-languages/#programming-languages","text":"","title":"Programming Languages"},{"location":"topics/programming-languages/#pl-100-language-usage","text":"Language Frontend Backend Mobile Java Prohibited See Below See Below Javascript See Below See Below See Below Python Prohibited See Below Prohibited C# Prohibited Prohibited Prohibited PHP Prohibited Prohibited Prohibited C/C++ Prohibited Prohibited Prohibited Objective-C Prohibited Prohibited Prohibited Rationale: We restrict the programming languages and frameworks in Lambda Labs so that we can focus our resources on a subset of available technologies. By narrowing the field of choices, we feel that product quality will be improved through the sharing of common knowledge and reusable components. Exceptions: None","title":"(PL-100) Language Usage"},{"location":"topics/programming-languages/#pl-200-framework-versions","text":"Framework Permitted Versions Notes React > 16.10 Java SDK Java SE 12 Java SE 13 Spring Framework > 5.2.0 Spring Boot > 2.0.0 Node.js > 12 Android SDK > 10 React Native > 0.60 Rationale: We restrict the frameworks and versions in Lambda Labs so that we can focus our resources on a subset of available technologies. By narrowing the field of choices, we feel that product quality will be improved through the sharing of common knowledge and reusable components. Exceptions: None","title":"(PL-200) Framework Versions"},{"location":"topics/security/","text":"Application Security (SC-100) Never Commit Secrets No secrets, credentials or sensitive data shall ever be committed to a Git repository, either local or remote. Rationale: Secrets provide access to administrative functions as well as protected data. Exposing secrets in a repository is a primary attack vector for compromised systems that is exploited every day on the internet. Secrets must be protected at all times and are instantly at risk and exposed when committed into a source code repository. Alternatives: Communicating shared secrets should only be done via email or Slack. (Note: This will change as we're working on making a secrets management tool available.) Use dotenv ( https://github.com/motdotla/dotenv ) or an equivalent tool to put secrets into your local environment, which can then be read by your application at runtime. (SC-200) Never Store Secrets No software shall maintain user secrets in application storage. Rationale: Effectively storing and protecting secrets is extremely difficult and incurs a great deal of design, development and operational overhead. Alternatives: Always use a trusted 3rd party Identity Provider (IdP) to authenticate users. Exceptions: Non-user specific secrets (e.g. api keys, etc.) should be stored using secure services and provided to the application at runtime using environment variables. (SC-300) Permitted IdP List Only IdPs in the following list shall be used by a Labs project: https://www.okta.com/ https://auth0.com/ Rationale: Limiting the options for IdPs allows for more consistency in their use. Not all IdPs are created equal. The IdPs in the list above have been vetted to balance their market share (popularity), effectiveness and cost. Alternatives: None Exceptions: None","title":"Security"},{"location":"topics/security/#application-security","text":"","title":"Application Security"},{"location":"topics/security/#sc-100-never-commit-secrets","text":"No secrets, credentials or sensitive data shall ever be committed to a Git repository, either local or remote. Rationale: Secrets provide access to administrative functions as well as protected data. Exposing secrets in a repository is a primary attack vector for compromised systems that is exploited every day on the internet. Secrets must be protected at all times and are instantly at risk and exposed when committed into a source code repository. Alternatives: Communicating shared secrets should only be done via email or Slack. (Note: This will change as we're working on making a secrets management tool available.) Use dotenv ( https://github.com/motdotla/dotenv ) or an equivalent tool to put secrets into your local environment, which can then be read by your application at runtime.","title":"(SC-100) Never Commit Secrets"},{"location":"topics/security/#sc-200-never-store-secrets","text":"No software shall maintain user secrets in application storage. Rationale: Effectively storing and protecting secrets is extremely difficult and incurs a great deal of design, development and operational overhead. Alternatives: Always use a trusted 3rd party Identity Provider (IdP) to authenticate users. Exceptions: Non-user specific secrets (e.g. api keys, etc.) should be stored using secure services and provided to the application at runtime using environment variables.","title":"(SC-200) Never Store Secrets"},{"location":"topics/security/#sc-300-permitted-idp-list","text":"Only IdPs in the following list shall be used by a Labs project: https://www.okta.com/ https://auth0.com/ Rationale: Limiting the options for IdPs allows for more consistency in their use. Not all IdPs are created equal. The IdPs in the list above have been vetted to balance their market share (popularity), effectiveness and cost. Alternatives: None Exceptions: None","title":"(SC-300) Permitted IdP List"},{"location":"topics/writing-standards/","text":"Writing Standards Format Each of the Topics will include a set of Standards. With each Standard being defined using the following template: <Title> (<Reference ID>) <Description> Rationale: - ... - ... Alternatives: - ... - ... Exceptions: - ... - ... Title A short and descriptive title to refer to the standard in conversation Reference ID An ID to use for referencing the standard in other documentation or automation. Description A clear, concise, specific and actionable description of the standard. Each standard must contain words that clearly direct decision making. Use words such as *shall, must, always and never. This ID should never be changed once the standard has been set. If the standard is no longer relevant or if the contents has changed significantly, the old standard should be retired and replaced with a new standard and new ID. Format: <Two Letter Abbreviation>-<Numerical Code> The abbreviation should be reflective of the area the standard is part of. The code is a 3-digit number starting from 100. Alternatives One or more bullets suggesting alternatives for standards that prohibit some choice Rationale One or more bullets describing the reason the standard exists","title":"Writing Standards"},{"location":"topics/writing-standards/#writing-standards","text":"","title":"Writing Standards"},{"location":"topics/writing-standards/#format","text":"Each of the Topics will include a set of Standards. With each Standard being defined using the following template: <Title> (<Reference ID>) <Description> Rationale: - ... - ... Alternatives: - ... - ... Exceptions: - ... - ...","title":"Format"},{"location":"topics/writing-standards/#title","text":"A short and descriptive title to refer to the standard in conversation","title":"Title"},{"location":"topics/writing-standards/#reference-id","text":"An ID to use for referencing the standard in other documentation or automation.","title":"Reference ID"},{"location":"topics/writing-standards/#description","text":"A clear, concise, specific and actionable description of the standard. Each standard must contain words that clearly direct decision making. Use words such as *shall, must, always and never. This ID should never be changed once the standard has been set. If the standard is no longer relevant or if the contents has changed significantly, the old standard should be retired and replaced with a new standard and new ID. Format: <Two Letter Abbreviation>-<Numerical Code> The abbreviation should be reflective of the area the standard is part of. The code is a 3-digit number starting from 100.","title":"Description"},{"location":"topics/writing-standards/#alternatives","text":"One or more bullets suggesting alternatives for standards that prohibit some choice","title":"Alternatives"},{"location":"topics/writing-standards/#rationale","text":"One or more bullets describing the reason the standard exists","title":"Rationale"}]}